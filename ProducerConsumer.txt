package com.多生产以及多消费;

import java.util.ArrayList;
import java.util.List;

class Goods {
    // 商品名称
    private String goodsName;
    // 商品库存
    private int count;

    public synchronized void set(String goodsName) throws InterruptedException{
        //此时还有商品没被消费，等待消费者消费
        while(this.count > 0){
            wait();
        }
        this.goodsName = goodsName;
        this.count = count + 1;
        Thread.sleep(1000);
        System.out.println(Thread.currentThread().getName());
        System.out.println("生产"+toString());
        System.out.println("============================================");
        //生产完商品后通知消费者可以消费了
        notifyAll();
    }
    // 消费方法
    public synchronized void get() throws InterruptedException {
        // 此时还没有商品，等待生产者生产商品
        while (this.count == 0) {
            wait();
        }
        // 每次消费一个商品
        this.count = this.count - 1;
        Thread.sleep(1000);
        System.out.println(Thread.currentThread().getName());
        System.out.println("消费"+toString());
        System.out.println("============================================");
        // 消费完告知生产者线程可以继续生产了
        notifyAll();
    }
}

class Consumer implements Runnable {
    private Goods goods;

    public Consumer(Goods goods) {
        super();
        this.goods = goods;
    }    @Override
    public void run() {
        // 继续消费
        while(true) {
            try {
                this.goods.get();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}

class Producer implements Runnable {
    private Goods goods;
    public Producer(Goods goods) {
        super();
        this.goods = goods;
    }
    @Override
    public void run(){
        while(true){
            try{
                this.goods.set("奔驰C200L一辆");
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    }
}


public class Test {
    public static void main(String[] args) {
        Goods goods = new Goods();
        List<Thread> threads = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            Thread produceThread = new Thread(new Producer(goods));
            produceThread.setName("生产者线程"+i);
            threads.add(produceThread);
        }

        for(int i=0; i<6; i++){
            Thread consunmeThread = new Thread(new Consumer(goods));
            consunmeThread.setName("消费者线程"+i);
            threads.add(consunmeThread);
        }

        for(Thread thread : threads){
            thread.start();
        }
    }
}
